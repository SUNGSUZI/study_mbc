1. rm 파일명

-> rm 파일명

​

​

2. 디렉토리 삭제

-> rm -r 디렉토리명

-> rm -rf 디렉토리명

-r  디렉토리명 : 디렉토리 삭제시 옵션
-rf  디렉토리명 : '-r'옵션으로 삭제가 안될시 대신 사용
​

​

3. 디렉토리 생성: mkdir

- make directory의 약어

- 디렉토리를 생성할 때 사용함

- 빈 파일을 생성할 때는 touch

- -p옵션을 주면 최종 디렉토리를 생성하기 전에 생성해야 할 부모디렉토리도 자동으로 생성됨.

​

mkdir aaa

mkdir -p aaa/bbb/ccc

​

​

4. 리눅스 명령어 도움받기

   - man 명령어 또는 명령어 --help

   - 둘 중 하나는 반드시 실행됨.

​

​

5. reset Vs revert

- a.txt, b.txt, c.txt, d.txt, e.txt파일을 각각 생성하고, 생성 시마다 커밋을 했다고 가정함.

각각의 커밋 메시지와 해시코드는 아래와 같다고 가정함.

e.txt 완성------------------eeeee

d.txt 완성------------------ddddd

c.txt 완성------------------ccccc

b.txt 완성------------------bbbbb

a.txt 완성------------------aaaaa

​

ⓐ git reset --hard ccccc

-> git log를 하면, 아래처럼 d와 e에 대한 정보가 삭제됨.

c.txt 완성------------------ccccc

b.txt 완성------------------bbbbb

a.txt 완성------------------aaaaa

-> 작업물: a.txt, b.txt, c.txt만 남음

              d.txt와 e.txt는 삭제됨.

​

​

ⓑ git revert ccccc

-> 새로운 커밋이 생성되므로 그에 대한 메시지를 입력하라는 vi에디터로 진입함. 

    커밋 메시지로 [c.txt만 삭제]라고 입력 후 ESC :wq

-> git log를 하면, 

c.txt만 삭제----------------e4e4e4(새로운 커밋에 대한 해시값이 생성됨)

e.txt 완성------------------eeeee

d.txt 완성------------------ddddd

c.txt 완성------------------ccccc

b.txt 완성------------------bbbbb

a.txt 완성------------------aaaaa

-> 작업물: a.txt, b.txt, d.txt. e.txt 남음

               c.txt 삭제됨.

​

​

6. reset과 revert 사용 시점

   reset: topic 브랜치에서 기능 구현 중에만 사용할 것, github에 push(보낼 때)할 때는 사용하지 말 것.

   revert: 아무때나 다 사용해도 됨.

​

​

7. revert Vs 정상적인 수정 작업 처리

   -> revert: 작업물에 너무 많은 에러가 있을 때, 작업물 자체를 다 제거해버림.

   -> 정상적인 수정 작업처리: 작업물에 극히 일부분에만 에러가 있을 때, 그 부분을 수정해서 작업물을 보완하고

                                        그에 따른 버전 정보를 기록하면 됨.

​[revert사용시 참고]
브랜치 revert시 충돌나면 git revert --abort
​

오전 수업 정리====

1. 진짜 파일을 삭제하려고 합니다. 파일명은  a.txt일 때, 리눅스 명령어를 적어 주세요.


2. aaa디렉토리를 삭제하려고 합니다. 리눅스 명령어를 적어 주세요.



3. 현재 디렉토리에 자식 디렉토리인 bbb를 생성하려고 합니다. 리눅스 명령어를 적어 주세요.



4. 현재 디렉토리에는 ccc 자식 디렉토리가 없습니다. 이 상태에서 ccc/ddd/eee 디렉토리를 생성해 주세요.



5. 리눅스에서 명령어에 대한 도움글을 보려고 합니다. 
man 명령어 또는 명령어 --help


==
- a.txt, b.txt, c.txt, d.txt, e.txt파일을 각각 생성하고, 생성 시마다 커밋을 했다고 가정함.
각각의 커밋 메시지와 해시코드는 아래와 같다고 가정함.
e.txt 완성------------------eeeee
d.txt 완성------------------ddddd
c.txt 완성------------------ccccc
b.txt 완성------------------bbbbb
a.txt 완성------------------aaaaa
===


6. git reset --hard ccccc
   -> git log를 했을 때, 나오는 결과는?



7. 6번의 결과물들은 어떻게 될까요?



==
- a.txt, b.txt, c.txt, d.txt, e.txt파일을 각각 생성하고, 생성 시마다 커밋을 했다고 가정함.
각각의 커밋 메시지와 해시코드는 아래와 같다고 가정함.
e.txt 완성------------------eeeee
d.txt 완성------------------ddddd
c.txt 완성------------------ccccc
b.txt 완성------------------bbbbb
a.txt 완성------------------aaaaa
===

8. git revert bbbbb를 실행한 결과는 어떻게 될까요?



9. 8번의 결과로 뜬 vi에디터에서 무엇을 해야 하는 걸까요?




10. 9 번까지 작업 후 git log 했을 때의 결과를 적어 주세요.



11. 9번까지 했을 때의 작업 결과물은 어떻게 되었을까요?



12. reset을 해야 할지 revert를 해야 할지 구분하세요.
- topic 브랜치에서 insert 기능을 구현하고 있습니다. 그러면 이렇게 저렇게 해 보고 하면서 구현을 하고 있습니다.
  완성은 안 됐고, 계속해서 코드를 고쳐가면서 테스트하면 구현하고 있음....
github 작업은 없습니다.



13. reset을 해야 할지 revert를 해야 할지 구분하세요.
github와 연동된 작업을 하고 있다.
다른 사람들도 수정하거나 삭제하려는 코드를 갖고 있다.
이 상황에서 reset을 해야 할까요, revert를 해야 할까요?
5 명이 하는데, 홍길동이 가장 먼저 commit을 하고 push를 하고 나머지 4 명이 이후에 push를 했음.
그런데 홍길동의 작업물에 이상이 있습니다.




14. revert를 해야 할지 아니면 그냥 일반적인 수정 작업을 하고 버전을 업그레이드할지 구분하세요.
작업 결과물에 너무 많은 에러가 있음. 일일이 찾아서 재작업하는 것이 시간이 더 많이 걸림....
​

​

====오후 수업

revert를 사용하면 작업이 취소가 된다.
이때 작업이 취소된 것을 복구하려면, 어떻게 해야하는가?
1) git reflog -> revert직전의 해시코드 알아내기
2) git checkout "revert직전의 해시코드" -- .


8. revert 시 삭제되는 자료를 삭제되지 않게 하기

-> git reflog를 통해서 revert 직전의 해시코드값 알아내기

    -> git checkout 해시코드 -- .

        -> 삭제된 파일이 복구됨.

            -> 수정 작업하고 

                 -> add 및 commit 작업하면 끝

​

​

그런데 이렇게 작업할 거면, 차라리 revert를 하지 말고 일반적인 방법으로 수정 작업을 하고 버전을 업그레이드시키는 게 낫음.

​

​

===========================

로그가 많이 쌓여서 학습하기 좋지 환경임.

그래서 ex05 디렉토리를 새로 생성해 진도 나감.

===============================

9. ex04 디렉토리에서 git_study디렉토리로 이동

cd ..

​

​

10. ex05 디렉토리 생성

mkdir ex05

​

​

11. ex05 디렉토리 안으로 이동

cd ex05

​

​

12. ex05 디렉토리를 git으로 관리하기

git init

​

​

13. a.txt 파일 생성

touch a.txt

git add .

git commit -m "이상하게"

***일부러 커밋메시지를 이상하게 넣었음****

​
commit 수정

1) 처음 커밋하는거면 .git파일 삭제 후  
  git init 로 git 관리


2) commit 메세지 변경
   -> git  commit -- amend -m "변경한 커밋 메세지"
   -> 가장 최근에 한 커밋에 대한 커밋 메시지를 수정합니다.

3) 과거에 커밋한 커밋 메지지 수정하는 방법
   -> git rebase -i head~"수정할 커밋개수(최근커밋내역에서부터)"
​

14. 첫 번째 커밋 메시지 수정하기

ⓐ .git 디렉토리를 삭제하여 처음부터 다시

ⓑ git commit --amend -m "환경설정 완료"

    - 원래는 가장 최근 커밋의 메시지를 수정할 때 사용함.

​

​

​

15. 가장 최근에 commit한 것의 commit 메시지 수정하기

git commit --amend -m "가장 최근 커밋의 메시지를 수정할 때 사용함."

​

​

​

16. b.txt파일 ~ e.txt파일 생성 및 add 그리고 커밋

​

​

17. 최근 커밋한 것을 포함해서 n 개까지의 커밋 메시지 수정하기

git rebase -i head~n

단, 최초의 커밋은 n에 포함할 수 없음. 별도의 코드(git rebase -i --root)로 진행해야 함.

​

git rebase -i HEAD~3

-> vi 에디터가 뜸.

-> 가장 최근 커밋을 1로 해서 나머지 2개의 커밋 메시지 중에서 어떤 것을 수정할지에 대한 대상을 선정하는 화면임.

-> 2, 3의 커밋 메시지를 수정할 것임.

-> vi 에디터에서 i를 입력해 편집모드로 들어감.

-> 2번째와 3번째에 대해 pick -> r로 수정

-> Esc키를 누르고

-> :wq를 입력 후 엔터

-> 2 개에 대해 커밋 메시지를 수정하겠다고 선언했으므로 이후에 2 번의 vi 에디터가 나옴.

​

​

18. 첫 번째 vi에디터가 뜸.

-> i를 입력해서 편집모드로 들어감

-> 커밋메시지를 수정하고

-> Esc키를 누르고

-> :wq를 입력 후 엔터

-> 두 번째 커밋 메시지에 대한 vi 에디터가 뜸

​

​

19. 두 번째 vi에디터가 뜸

-> i를 입력해서 편집모드로 들어감

-> 커밋메시지를 수정하고

-> Esc키를 누르고

-> :wq를 입력 후 엔터

​

20. git log

최근 2, 3 번째 커밋에 대한 커밋 메시지가 변경된 것을 확인할 수 있음.

​

​

21. 최초의 커밋을 수정하려면?

git rebase -i --root

-> vi에디터가 열리고, head부터 최초의 커밋까지가 나옴.

    -> 최초의 커밋을 pick에서 r로 수정하고 

        -> ESC 누르고

            -> :wq

                -> vi에디터가 열림.

                     -> 최초의 커밋에 대한 메시지를 수정함. 이후 작업은 ESC 누르고, :wq

​

​

​

22. 하나의 기능을 구현하면서 여러 개의 커밋을 생성했을 때, 하나의 커밋으로 만들기 

하나의 기능 구현에 대해 commit은 한 번만 날려야 함.

그러나 작업을 하다보면, 

어쩔 수 없이 하나의 기능에 대해 여러 번의 커밋을 날려야 할 상황이 발생함.

​

가령

회사에서 20% 마치고

집에서 50% 마치고

출장지에서 30% 마쳐서 최종적으로 기능을 구현했을 경우를 가정하면,

회사에서 구현한 내용을 집에서 이어서 작업하려면 어쩔 수 없이 회사에서 커밋을 해야 함.

집에서 구현한 내용도 마찬가지이고

출장지에서 구현한 내용도 회사에서 사용하려면, 커밋을 해야 함.

이런 상황에서 3 개의 커밋을 1 개의 커밋으로 만들기

​

​

23. 같은 기능의 커밋 여러 개를 1 개의 커밋으로 만들기

git rebase -i HEAD~3

-> vi 에디터로 들어감

-> i를 입력해서 편집모드로 들어감.

-> 가장 위에 있는 것을 제외하고 나머지 두 개에 대해서 pick -> s로 변경

-> Esc

-> :wq

-> 커밋 메시지를 입력할 vi 에디터가 뜸

-> 편집 후에 

-> Esc 

-> :wq

-> git log





===================================================


rebase : 상위브랜치의 내용을 하위 브랜치 내용에 merge하는 법
merge 도중에 병합을 취소하려면 --abort를 사용



  