이전 수업 복습
===================================================
13. rest VS revert 를 상황에 맞게 구분해서 사용해야하빈다.
reset 은 어떤 브랜치에서 사용합니까? topic
->reset은 토픽브랜치에서 언제 사용합니까? 코드를 짤때 (구현)reset 을 이용하여 커밋을 정리함.


14. revert는 어떤 상황에서 사용합니까?
- 아무때나 사용 가능하지만,
-> 공동작업할떄(github에서 함)... 깃 허브 작업을 할때 revert를 사용함.

15. revet VS 정상적인 상황의 수정작업
-revert작업을 하면, 결과물이 취소...(파일이나 디렉토리를 생성, 파일내용수정등)
 -> v 1.0.0
-정상적인 상황의 수정작업:
-> v 1.0.1
-> v 1.0.2
 
16. revert 작업을 하면, 작업이 취소가 됨.
근데 작업물을 원래 상태로 가져와서 add 상태까지 만들어 놓는 코드가 있음.
이작업을 하기 전에 먼저 해야 할 것은?
git reflog -> 해시코드값을 확인

git checkout 3333 -- .
revert로 취소된 작업물이 원복됨 
대신 add 상태까지만 되어 있음.
commit을 해주어야함.
=> revert를 하지 않고 그냥 일반적인 수정작업으로 대체하는 것도 좋음. + 버전업

17. git reflog


커밋메시지 수정
여러개의 커밋을 하나로 만들기

 18. 첫번쨰 커밋 메시지 수정하기 
1) .git 디렉토리를 삭제.
 2) git commit --amend -m "수정할 메시지"

19. 가장 최근의 커밋에 대한 커밋 메시지 수정하기
git commit --amend -m "수정할 메시지"


=
e------------------eeeee
d------------------ddddd
c------------------ccccc
b------------------bbbbb
a------------------aaaaa
=
20. 해시코드 bbbb인 커밋에 대한 메시지를 b-> insert기능 구현 끝.. 수정..
git rebase -i hea~4 입력하면 뭐가 나옴?
vi 에디터가 나옴

21. 20번결과로 나오는 vi 에디터를 어떻게 편집해야할까요?
i로 입력모드로 들어감.
=
pick------------------e
pick------------------d
pick------------------c
r------------------b
pick------------------a
=

:wq

22. 21번을 수행하고 나면, 어떤 상태가 되나요.
r로 바꾼만큼(수정할 커밋메시지 수 만큼) vi에디터가 로드 된다.

23.22번의 vi 에디터는 bbbb에 대한 커밋 메시지 수정을 위해서 열렸음.
insert 기능 구현 끝

24. git log의 결과는?

e------------------eeeee
d------------------ddddd
c------------------ccccc
insert 기능 구현 끝------------------bbbbb
a------------------aaaaa

25. 해시코드가 aaaa인 커밋 메시지를 a-> 환경설정 완료로 변경하고 싶으면?
git rebase -i --root => vi 에디터 => 해시 코드가 aaaa인 커밋에 대해서 pick ->r 로 수정 => esc =>:wq
=> vi 에디터 => 커밋 메시지 수정


26. 하나의 기능을 구현하는데, 어쩔 수 없이 여러개의 커밋작업을 했을경우 이를 하나의 커밋으로 만드는 방법...
=
삭제2-------------f1f1f1
삭제1-------------ffffffff
e------------------eeeee
d------------------ddddd
c------------------ccccc
b------------------bbbbb
a------------------aaaaa
=

가장먼저 작업할 코드를 입력
git rebase -i HEAD~2 =>vi 에디터 => i =>삭제2의 커밋으로 이동 => pick->s로 바꿈 =>esc > :wq

27. 26번에 서 열린 vi editor를 어떻게 편집해야할까요?
s --------- f1f1f1  삭제2
esc :wq

28. 27번 작업을 하면 어떤 일이 생기는가? vi editor가 열림

29. 28번에서 열린 에디터의 목적은? 하나로 만들어진 commit에 대한 커밋 메시지 수정.

=====================================================
현재 디렉토리 A에서 하위 디렉토리 B3의 안의 파일, 디렉토리를 확인하려면 어떻게 하는가?
(20240821_git활용3 폴더 안에 있는 '경로'파일참고)
  -> ls B3
  -> ls [하위디렉토리] 
      -> 하위 디렉토리의 파일을 보여줌

===============프로젝트 팀장 할일===============
git hub사용 
1. 깃허브에서 레파지토리 생성하기
   1)  로그인 
   2)  your repository 
   3)  new 
   4)  Add README file 선택란에 체크
      --> default 브랜치가 master가 아닌 main으로 만들어줌

2. 로컬 pc에서 파일을 생성하고 자 하는 위치에 마우스 우클릭 -> git dash ->선택
연습 1.) https://github.com/SUNGSUZI/mbc803.git
연습 2.)https://github.com/SUNGSUZI/mbcwagok80301.git

->연습1.로 진행
3. git clone "https://github.com/SUNGSUZI/mbc803.git"


4. mbc803디렉토리로 넘어간다 
cd mbc803


5. 팀장은 프로젝트에 적용할 환경설정을 작업한다.
기능구현이 끝나면, README.md 파일에 그에 대한 기록을 해야한다.
--> README.md에는 완료된 기능만 적는다.

6. dev브랜치 생성 및 체크 아웃
git checkoout -b dev

7. git push --all 
-> '- all'은 main, dev 브랜치 의미.
-> 프로젝트당 딱 한번만 실행하는 코드

github로 보내는것이 push github에 있는것을 가져오는것이 pull

8. 깃허브의 해당 레파지토리에 설정 메뉴에 가서 협업할 대상을 설정
   ->해당 레파지토리의 setting 메뉴를 클릭
   -> 왼쪽의 사이드메뉴에서 Collaborators를 클릭
   ->우측 화면에서 초록색의 Add People 버튼 클릭
   -> 초대하고 싶은 사람의 유저명이나 이메일주소 입력
   -> 초대가 보류가 됨.
   -> 초대 받은 사람들이 초대에 수락하면, 작업이 진행됨
 

9. main/dev 브랜치에 아무나 merge(병합) 작업을 하지 못하도록 설정
  -> 해당레파지토리 setting 메뉴 클릭
  -> 왼쪽 사이드 메뉴에서 rules 클릭
  -> Rulsets 클릭 후 RuleSet branch 클릭
  -> ruleName 설정
  -> target branches 의 add target 클릭
  -> 화면 내려서 include by pattern에 main과 dev branch 추가
  -> 화면 내려서 Branch rules 추가 rule체크하기
      -Restrict deletions(기본으로 선택 되어있음)
      -Require a pull request before merging(추가 선택란)
      -Block force pushes(기본으로 선택 되어있음)

10. 팀장도 팀원들 처럼 topic 계정을 만들어서 작업을 해야함(*작업 디렉토리, main디렉토리 구분)
- git clone  "git 주소" "원하는 이름
git clone "clone https://github.com/SUNGSUZI/mbc803.git mbc803_crew
-> mbc803_crew라는 이름으로 디렉토리생성됨
-> 같은 이름으로 생성할 경우 clone이 안될수도 있는 문제 해결

================================팀장이 할일 =====
================================팀원이 할일 ======

11. 팀장과 협업하는 레파지토리의 주소를 복사

12. 작업할 파일 위치에서 마우스 우클릭하여 git bash 열기
ex) git_study 에서 우클릭하여 gitbash 접속

13. 레파지토리 다운로드
  - git clone  "git 주소" "원하는 이름
    -> git clone "clone https://github.com/SUNGSUZI/mbc803.git mbc803_crew

================================팀원이 할일 ======
14. dev 블랜치 체크아웃
15. topic 브랜치를 생성하고 체크아웃까지
16. 회원가입기능 구현 후 add/commit
touch insert1.txt
touch inser2.txt
git add .
git commit -m " 회원가입 기능완료"

17. README.md파일수정
echo "2.회원가입기능완료" >>README.md
git add .
git commit -m "회원가입기능완료 README.md 파일 수정"

18. 회원 가입에 대한 커밋이 두개 있음 -> 하나로 만들어주기 (정석)
-> git rebase -i HEAD~2
-> vi 에디터로 접속됨
-> 나중에 작업한 커밋으로 이동 pick을 s로 수정
-> esc
-> :wq
-> 커밋메시지 작성
->esc
->:wq 

19. 로컬의 topic 브랜치의 정보를 orgin(깃허브)의 topic 브랜치에 전달함 : push
    1) git checkout dev
      - 로컬 dev로 이동함.
    2) git pull origin dev
      - 내가 작업한 내용을 올리기 전 현재 origin(github) dev최신 파일을 가져와야함.
      - orgin(github)dev의 내용을 내 로컬(내PC) dev브랜치에 당겨옴.
   3) git checkout insert_topic
   4) git rebase dev
      - 최신파일내용을 당겨받은 dev 브랜치의 정보를 insert_topic브랜치로 merge 시킴
   5) git push origin insert_topic 
      - 내가 작업한 내용을 
merge요청 하는것을 pr요청이라고 함







======================================
강사님이 정리하신 내용
 다음글목록
git/github 
8월21일(수) 수업 내용
프로필 사진인기멤버
803강사
1:1 채팅
2024.08.21. 13:16조회 29
댓글 0URL 복사
1. 경로 학습


​

​

2. github 실습

   - github에 로그인(sign in)

​

​

=======여기서부터 팀장이 할 일..............

3. 깃허브에 새로운 레파지토리 생성

​

   

4. 로컬PC(우리 컴퓨터)에 깃허브에 생성한 레파지토리 다운로드하기

   - 깃허브의 새로운 레파지토리 화면에서 초록생의 CODE 버튼을 클릭

     - 주소 복사: https://github.com/teacheryonate/mbc803.git

   - 로컬PC의 workspace/git_study 디렉토리에서 마우스 우클릭하여 git bash 엶

    - git clone 복사한주소

       -> 레파지토리와 이름이 같은 디렉토리가 생성된 것을 확인할 수 있음

​

​

5. 해당 디렉토리로 이동

   cd mbc803

​

​

6. 환경설정 작업하기

   - config.txt 파일로 이 작업을 대체하겠음.

   - README.md 파일에 이와 관련된 내용 기록

   - add 및 commit 작업

​

​

7. dev 브랜치 생성 및 체크아웃

   git checkout -b dev

​

​

8. git push --all

    - main, dev 브랜치의 작업을 모두 github으로 보낸다는 의미

    - 프로젝트에서 딱 한 번만 실행함.

​

​

9. 깃허브의 해당 레파지토리 설정 메뉴에 가서 협업할 대상을 설정

    -> 해당 레파지토리의 settings 메뉴를 클릭

        -> 왼쪽의 사이드메뉴에서 Collaborators를 클릭

            -> 우측 화면에서 초록색의 Add People 버튼 클릭

                -> 초대하고 싶은 사람의 유저명이나 이메일주소 입력

                     -> 초대가 보류됨.

                          -> 초대 받은 사람들이 초대에 수락하면, 작업이 진행됨. 

​

​

​

10. 깃허브의 해당 레파지토리 main/dev 브랜치에 아무나 merge(병합) 작업을 하지 못 하도록 설정

   -> 해당 레파지토리의 settings 메뉴를 클릭

       -> 왼쪽의 사이드메뉴에서 Rules를 클릭

            -> Rulesets 클릭

                 -> 우측화면에서 

                      ⓐ Ruleset Name: pr_target_ruleset

                      ⓑ Enforcement status: Active

                      ⓒ Bypass list: 손대지 말고

                      ⓓ Targets에서 Branch targeting criteria에서 Add target에서

                          -> Include By Pattern 선택 후, main 입력

                          -> Include By Pattern 선택 후, dev 입력

                      ⓔ Branch rules에서 Require a pull request before merging만 추가 선택

                      ⓕ Create버튼 클릭

​

===========여기까지가 팀장이 할 일이었음.

===========여기부터는 팀원이 할 일.............

11. 팀장과 협업하는 레파지토리의 주소를 복사하여

     - edge(팀원용) 브라우저에서

     

12. git_study에서 마우스 우클릭하여 git bash 열고

​

13. 레파지토리 다운로드

     - git clone 복사한주소 

     - 만약 다른 디렉토리에 다운로드하고 싶다면, 

       git clone 복사한주소 다운로드받을디렉토리명

       -> git clone https://github.com/teacheryonate/mbc803.git     mbc803_crew

​

​

14.  mbc803_crew 디렉토리로 이동

    cd mbc803_crew

​

​

15.  dev 브랜치 체크아웃

​

​

​

16. topic 브랜치를 생성하고 체크아웃까지

git checkout -b insert/topic

​

​

​

17. 회원 가입 기능 구현 후 add/commit

touch insert1.txt

touch insert2.txt

git add .

git commit -m "회원 가입 기능 완료"

​

​

18. README.md 파일 수정

ehco "2. 회원 가입 기능 완료" >> README.md

git add .

git commit -m "회원 가입 기능 완료 정보 README.md에 기입"

​

​

19. 회원 가입에 대한 커밋이 2 개나 있음.

     -> 하나로 만드세요.

         -> git rebase -i head~2

              -> vi editor가 뜸.

                  -> 첫 번째 커밋은 pick으로 설정하고 나머지 커밋들은 s로 설정

                       -> ESC,    :wq

                           -> vi editor가 뜸...

                               -> 커밋메시지 입력하고  ESC,     :wq

​

​

​

20. 깃허브로 push하기 전에 해야 할 일

    -> 내가 작업하는 동안 다른 개발자가 개발을 완료하여 깃허브에 push하고 pr요청/승인이 되었다면, 

        내가 갖고 있는 작업물과 origin의 dev는 차이가 발생하고, 이로 인해 병합이 안 됨.

         따라서 이러한 문제점이 발생하지 않게 하기 위해서 push 전에 해야 할 작업이 있음.

     -> git checkout dev

         -> git pull origin dev   ---github의 dev 브랜치의 내용과 local의 dev 브랜치를 일치시킨

             -> git checkout insert/topic

                 -> git rebase dev    -----다른 개발자의 결과물을 내 자료에도 넣어서 github에서 병합에 문제 없게 함.

​

​

​

​

21. origin(깃허브)로 push하기

git push origin insert/topic

​

​

​



