1. 지난 주 금요일 수업 정리

===========================여기서부터 오늘 진도

2. topic 브랜치 생성

    git branch insert_topic

​

    

3. 브랜치 목록 확인

    git branch 

​

​

4. topic 브랜치로 체크아웃

   git checkout insert_topic

​

​

5. topic 브랜치 작업/add/commit까지

   - commit 시 -m 옵션을 사용하여 현재 화면에서 메시지를 입력하는 게 일반적임.

      -> 만약 git commit까지만 입력하고 엔터를 누르면 vi 에디터가 실행됨.

          -> 아직 vi 에디터 사용법에 대한 수업이 안 나간 상태임

               -> vi 에디터를 빠져나오는 절차 

                    ⓐ ESC키를 입력

                    ⓑ :(콜론)을 입력

                    ⓒ q!를 입력


​

6. 로그 확인

    git log

​

​

7. dev 브랜치와 topic 브랜치 병합하기

   - 현재까지는 topic 브랜치의 작업이 dev 브랜치에 반영이 안 된 상태임

​

   

8. dev 브랜치로 체크아웃

    git checkout dev

​

​

9. topic 브랜치의 작업이 dev 브랜치에 반영이 안 된 것 확인하기

   git log

​

​

10. dev 브랜치와 topic 브랜치 병합하기

     git merge insert_topic

​

​

11. 병합된 결과 확인하기

     git log

 

​

12. 브랜치 생성과 체크아웃을 동시에 하기

     git checkout -b selectById_topic

​

​

13. 브랜치 삭제하기

     - 삭제할 브랜치의 상위 브랜치로 체크아웃

       -> git branch -d 브랜치명

           git branch -d insert_topic

​

​

14. merge작업이 완료되지 않은 브랜치 삭제하기

병합작업이 안 된 상태에서 브랜치를 삭제하려고 하면, 아래와 같은 에러 문구가 나옴.

error: the branch 'g_topic' is not fully merged
hint: If you are sure you want to delete it, run 'git branch -D g_topic'
hint: Disable this message with "git config advice.forceDeleteBranch false"
에러 문구에 병합작업이 안 된 브랜치를 삭제하는 코드를 알려 주고 있음.
git branch -D g_topic
-> 옵션 '-D'를 통해서 삭제작업이뤄짐

15. 리눅스에서 현재 디렉토리의 경로를 알고 싶을 때,

     pwd(print working directory, present working directory)

​

​

16. 리눅스에서 숨김파일을 생성하고 싶다면, 

     파일명의 맨 앞을 .(닷)으로 지정하면 된다.


===오전 수업 정리==============================================

1. test_topic브랜치를 생성과 동시에 체크아웃하는 코드를 작성하세요.
git checkout -b test_topic

2. 현제 test_topic브랜치에 체크아웃되어 있음. 이 브랜치와 dev브랜치를 병합하려고 합니다. 관련 코드를 절차에 맞게 작성하세요.
- 병합(merging)은 상위 브랜치에서만 진행할 수 있음......



3. 병합작업이 끝나면, git log 확인하세요.


4. 해당 토픽을 삭제하세요.(병합 작업이 끝난 상태임)
git branch -d test_topic 
git log


5. 만약에 test_topic브랜치와 dev브랜치가 병합작업을 안 한 상태에서
test_topic 브랜치를 삭제하려면 어떻게 해야 할까요?
단, 현재 dev 브랜치에 체크아웃된 상태임....





6. 작업을 하고 add까지 된 상태에서 commit을 하려고 합니다.
git commit (엔터)를 하면 어떤 프로그램이 실행될까요?
정답: vi에디터가 실행됨.
vi에디터 사용법은 나중에 ...........



7.  6번 상황에서 vi에디터를 종료하는 절차를 입력하세요.
정답:
    - ESC키를 입력
    - :(콜론)을 입력
    - q!를 입력
​==========================================




===오후 수업 시작
하위 브랜치의 작업내용을 상위 브랜치에 적용  - merge
상위 브랜치에 적용된 내용을 하위 브랜치에 적용하려면? - rebase


15. git reflog

- 모든 로그 작업 정보가 기록되어 있음.

- reset을 할 때, 여기의 해시값을 이용하여 원하는 작업을 헤더로 설정함.

​

​

16. git reset 

- 작업 되돌리기

- 옵션이 3 가지가 있음.

   - 옵션을 안 적으면 --mixed

   --soft:    작업(O), add (O). commit(X)

   --mixed: 작업(O), add(X), commit(X)

   --hard:   작업(X), add(X), commit(X)

만약 reflog를 모른다면, 3 개의 옵션을 구별해서 사용해야 함.

그러나 reflog를 알고 있으므로 다른 옵션은 중요하지 않고 --hard 옵션만 알고 있으면 됨.

아울러 이 옵션은 topic 브랜치에서만 사용한다고 생각하면 됨.

reflog를 사용해서 이전작업과 현재작업을 왔다갔다하면 기록에 남지만
git log만을 이용해서 이동을 하면 문제가 발생할 수 있음.

​

git reset --hard reflog에서확인한해시값

​17. 프로그래밍에서 파일이란?

    - 진짜 파일과 디렉토리를 모두 가리킨다.

       -> 그래서 진짜 파일인지 디렉토리인지를 확인할 수 있게 하는 기능이 있음.

​

​

​

17. vi에디터의 모드

    - 일반모드

      - 처음 vi에디터에 들어가면, 일반모드임.

      - 다른 모드에서 일반모드로 나오려면, ESC키를 누름

​

    - 입력(편집)모드

       - 일반모드에서 i, a, o 중 하나를 입력하면 입력모드가 됨.

       - 가장 많이 사용하는 i를 이용해서 입력모드로 진입하겠음.

​

    - 명령모드

      - 일반모드에서 :(콜론)을 입력하면 명령모드가 됨.

      - :wq를 입력하여 저장하고 vi에디터를 빠져나옴.

      - :q!를 입력하여 저장하지 않고 vi에디터를 빠져나옴.

​

    - 비주얼모드

       - 일반모드에서 v를 입력하면 비주얼모드가 됨.

       - 콘텐츠의 일부를 선택하여 복사하는 등의 작업을 할 때 사용함.

​

​

18. 지금 당장 vi에디터 학습은

     - 일반모드에서 

        i를 입력하여 입력모드로 진입하여 문서를 편집하고

        ESC키를 눌러 다시 일반모드로 진입한 후 

        :를 입력하여 명령모드로 진입한 후

         wq를 입력하여 저장하고 나오든가

         q!를 입력하여 저장하지 않고 나오는 것까지만.

vi 에디터 단축키
삽입
키	기능
i	커서 위치에 Insert
I	줄 맨 앞에서 Insert
a	커서 다음에 Insert
A	줄 맨 뒤에서 Insert
o	커서 아래로 한 줄 띄우고 Insert
O	커서 위로 한 줄 띄우고 Insert


이동
키	기능
w	단어 첫 글자 기준으로 다음으로 이동
W	공백 기준으로 다음(단어의 시작)으로 이동
b	단어 첫 글자 기준으로 이전으로 이동
B	공백 기준으로 이전으로 이동
e	단어 마지막 글자 기준으로 다음으로 이동
E	공백 기준으로 다음(단어의 끝)으로 이동
gg	문서 맨 앞으로 이동
G	문서 맨 아래로 이동
^	문장 맨 앞으로 이동
$	문장 맨 뒤로 이동

편집
키	기능
dd	현재 줄 잘라내기
yy	현재 줄 복사하기
p	붙여넣기
u	실행취소 (Undo)
ctrl + r	재실행 (Redo)
v	Visual모드
y	복사
c	잘라내기

저장
키	기능
:w	저장
:q	닫기
:q!	저장하지 않고 닫기
:wq	저장하고 닫기
:숫자	지정한 줄 번호로 이동

출처 참고
h, j, k, l - 좌,하,상,우 커서이동
i - 현재 커서 위치에 Insert 하기
I - 현재 줄 맨앞에 Insert 하기
a - 현재 커서 다음칸에 Insert 하기
A - 현재 줄 맨뒤에 Insert 하기
O - 윗줄에 Insert 하기
o - 아랫줄에 Insert 하기

w - 단어 첫글자로 이동하기
W - 화이트스페이스 단위로 다음 글자로 이동하기
b - 백워드 방향으로 단어의 첫글자로 이동하기
B- 백워드 방향으로 화이트스페이스 단위로 다음 글자로 이동하기
e - 단어의 마지막 글자로 이동하기
ge - 백워드 방향으로 단어의 마지막 글자로 이동하기
gg - 문서 맨 앞으로 이동
G - 문서 맨끝으로 이동
^ - 문장 맨 앞으로 이동
0 - 라인 맨 앞으로 이동
$ - 문장 맨 뒤로 이동
f문자 - 문자의 위치로 이동 ; 를 누르면 계속 이동
F문자 - 백워드로 문자의 위치로 이동
t문자 - 문자의 앞위치로 이동
T문자 - 백워드방향으로 문자의 앞위치로 이동

/단어 - 문서에서 단어 찾기 n이나 N으로 다음/이전 찾기
* - 현재 단어를 포워드 방향으로 찾기
# - 현재 단어를 백워드 방향으로 찾기

Ctrl + f - 다음 페이지 이동
Ctrl + b - 이전 페이지 이동
Ctrl + u - 페이지절반만큼 다음으로 이동
Ctrl + d - 페이지절반만큼 이전으로 이동
H - 현재 화면의 맨 위라인으로 이동
M - 현재 화면의 중간 라인으로 이동
L - 현재 화면의 마지막 라인으로 이동

]] - 포워드 방향으로 여는 컬리 블레이스( { )로 이동
[[ - 백워드 방향으로 여는 컬리 블레이스( { )로 이동
][ - 포워드 방향으로 닫는 컬리 블레이스( { )로 이동
[] - 백워드 방향으로 닫는 컬리 블레이스( { )로 이동
% - {}나 ()에서 현재 괄호의 짝으로 이동

dd - 현재 줄 잘라내기
dw - 단어 잘라내기
yy - 현재 줄 복사하기
p - 붙혀넣기
r - 현재 글자 교체하기
u - Undo
Ctrl + R : Redo
x - 현재 글자 지우기
X - 앞의 글자 지우기
> - 들여쓰기
< - 내어쓰기
. - 이전 명령어를 다시 실행

v - 비쥬얼모드(비쥬얼 모드에서 커서 이동해서 블럭지정 가능)
y - 복사하기
c - 잘라내기
cw - 단어 잘라내기
J - 다음 라인을 현재 줄의 끝으로 이어 붙힘
~ : 선택 문자 대소문자 변경
Ctrl + A : 숫자를 증가시키기
Ctrl + X : 숫자를 감소시키기

:w - 문서 저장하기
:q - 현재 문서 닫기
:q! - 저장하지 않고 닫기
:wq - 저장하고 닫기
:숫자 - 지정한 라인넘버로 이동

:new - 가로로 분할된 창 열기
:vs - 세로로 분할된 창 열기
Ctrl + w - 분할창 간에 이동하기
:tabnew - 새로운 탭 열기
:gt - 다음 탭으로 이동하기
:gT - 이전 탭으로 이동하기
:e ./ - 현재 탭에 오픈할 파일 탐색하기( ./ 는 현재위치에서 탐색 시작)
:colorscheme 스키마명 - VIM의 칼라스키마를 변경함(blue, desert, evening 등.. 스키마명에서 탭누르면 자동완성됨)

zc - 코드 접기(fold)
zo - 접힌 코드 펼치기
zd - fold 지우기
zR - 접힌 코드 모두 펼치기
zM - 코드 모두 접기
zD - 모든 fold 지우기

:buffers - 현재 Vim에서 여러 파일을 열었을때 버퍼에 있는 목록 확인
:buffer 숫자 - 버퍼 목록에 나온 숫자를 입력하면 해당 파일을 오픈함 ( :buffer 대신 :b 도 가능)
:bnext - 버퍼에 있는 다음 파일로 이동 ( :bn 도 가능)
:bprevious - 버퍼에 있는 이전 파일로 이동 ( :bp 도 가능)
:ball - 버퍼 목록에 있는 파일들이 가로로 분할된 창에 열림